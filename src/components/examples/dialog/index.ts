import type { DemoDefinition } from "@/types/demo";
import DialogDemo from "./dialog-demo";
import DialogWithIcon from "./dialog-with-icon";

const DIALOG_DEMO: DemoDefinition = {
  id: "dialog",
  label: "Dialog",
  description: "Dialogs provide important prompts in a user flow",
  content: [
    {
      id: "overview",
      label: "Overview",
      preview: DialogDemo,
      code: 'import Button from "@/components/ui/button";\nimport {\n    Dialog,\n    DialogBody,\n    DialogClose,\n    DialogContent,\n    DialogHeader,\n    DialogHeadline,\n    DialogSupporting,\n    DialogTrigger,\n} from "@/components/ui/dialog";\n \nexport function DialogDemo() {\n    return (\n        <div className="demo">\n            <Dialog>\n                <DialogTrigger>\n                    <Button variant="outlined">Open</Button>\n                </DialogTrigger>\n                <DialogContent style={{ width: "300px" }}>\n                    <DialogHeader showDivider>\n                        <DialogHeadline>Dialog title</DialogHeadline>\n                        <DialogSupporting>\n                            This is a standard alert dialog. Alert dialogs interrupt users\n                            with urgent information, details, or actions.\n                        </DialogSupporting>\n                    </DialogHeader>\n                    <DialogBody style={{ display: "flex", gap: "10px" }}>\n                        <DialogClose>\n                            <Button variant="text">Cancel</Button>\n                        </DialogClose>\n                        <Button variant="text">Done</Button>\n                    </DialogBody>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n};',
    },
    {
      id: "installation",
      label: "Installation",
      code: {
        tsx: 'import "./style.css";\nimport {\n    cloneElement,\n    createContext,\n    useContext,\n    useEffect,\n    useState,\n    type ComponentProps,\n    type ReactElement,\n    type ReactNode,\n} from "react";\nimport Icon from "@/components/misc/icon";\n \ntype DialogProps = { children: ReactNode; open?: boolean; quick?: boolean };\ntype DialogContentProps = ComponentProps<"div">;\ntype DialogBodyProps = ComponentProps<"div">;\ntype DialogHeaderProps = ComponentProps<"div"> & {\n    icon?: string;\n    showDivider?: boolean;\n};\ntype DialogHeadlineProps = ComponentProps<"h2">;\ntype DialogSupportingProps = ComponentProps<"p">;\n \nconst DialogContext = createContext<{\n    isOpen: boolean;\n    isClosed: boolean;\n    open: () => void;\n    close: () => void;\n} | null>(null);\n \nconst useDialogContext = () => {\n    const ctx = useContext(DialogContext);\n    if (!ctx)\n        throw new Error("Dialog component must be used within a Dialog provider");\n \n    return ctx;\n};\n \nconst Dialog = ({ children, quick, ...props }: DialogProps) => {\n    const ESC_KEY = "Escape";\n    const CLOSE_DELAY = quick ? 0 : 350;\n \n    const [isOpen, setIsOpen] = useState<boolean>(props.open ?? false);\n    const [isClosed, setIsClosed] = useState<boolean>(false);\n \n    function open() {\n        setIsOpen(true);\n    }\n \n    function close() {\n        setIsClosed(true);\n \n        setTimeout(() => (setIsOpen(false), setIsClosed(false)), CLOSE_DELAY);\n    }\n \n    useEffect(() => {\n        const onKeyDown = (e: KeyboardEvent) => e.key === ESC_KEY && close();\n \n        if (isOpen) window.addEventListener("keydown", onKeyDown);\n \n        return () => window.removeEventListener("keydown", onKeyDown);\n    }, [isOpen]);\n \n    return (\n        <DialogContext.Provider value={{ isOpen, isClosed, open, close }}>\n            {children}\n            {isOpen && <div mui-dialog-overlay="" onClick={close} />}\n        </DialogContext.Provider>\n    );\n};\n \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DialogTrigger = ({ children }: { children: ReactElement<any> }) => {\n    const { open } = useDialogContext();\n \n    return cloneElement(children, { onClick: open });\n};\n \nconst DialogHeader = ({\n    icon,\n    showDivider,\n    children,\n    ...props\n}: DialogHeaderProps) => {\n    return (\n        <div mui-dialog-header="" data-divider={showDivider} {...props}>\n            {icon && <Icon name={icon} />}\n            {children}\n        </div>\n    );\n};\n \nconst DialogHeadline = ({ ...props }: DialogHeadlineProps) => {\n    return <h2 mui-dialog-headline="" {...props} />;\n};\n \nconst DialogSupporting = ({ ...props }: DialogSupportingProps) => {\n    return <p mui-dialog-supporting="" {...props} />;\n};\n \nconst DialogContent = ({ ...props }: DialogContentProps) => {\n    const { isOpen, isClosed } = useDialogContext();\n \n    return (\n        isOpen && (\n            <div mui-dialog-portal="" data-closed={isClosed}>\n                <div mui-dialog-content="" {...props} />\n            </div>\n        )\n    );\n};\n \nconst DialogBody = ({ ...props }: DialogBodyProps) => {\n    return <div mui-dialog-body="" {...props} />;\n};\n \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DialogClose = ({ children }: { children: ReactElement<any> }) => {\n    const { close } = useDialogContext();\n \n    return cloneElement(children, { onClick: close });\n};\n \nexport {\n    Dialog,\n    DialogTrigger,\n    DialogHeader,\n    DialogHeadline,\n    DialogSupporting,\n    DialogContent,\n    DialogBody,\n    DialogClose,\n};',
        css: '[mui-dialog-portal] {\n    z-index: 9999;\n    position: fixed;\n    left: 50%;\n    translate: -50% -50%;\n    border-radius: var(--radius-xl);\n    background-color: var(--color-surface-container-high);\n    display: grid;\n    animation: var(--transition-expressive-slow-spatial) forwards;\n \n    &[data-closed="false"] {\n        animation-name: dialog-fade-in;\n    }\n \n    &[data-closed="true"] {\n        animation-name: dialog-fade-out;\n    }\n \n    [mui-dialog-content] {\n        overflow: hidden;\n \n        [mui-dialog-header] {\n            display: grid;\n            padding: var(--spacing-24);\n            padding-block-end: var(--spacing-0);\n \n            & > [mui-icon] {\n                color: var(--color-secondary);\n            }\n \n            [mui-dialog-headline] {\n                font: var(--font-headline-sm);\n                color: var(--color-on-surface);\n            }\n \n            [mui-dialog-supporting] {\n                text-align: start;\n                font: var(--font-body-md);\n                color: var(--color-on-surface-variant);\n                padding-block-start: var(--spacing-24);\n            }\n \n            &[data-divider] {\n                border-block-end: 1px solid var(--color-outline-variant);\n \n                [mui-dialog-supporting] {\n                    padding-block-end: var(--spacing-8);\n                }\n            }\n \n            &:has(> [mui-icon]) {\n                text-align: center;\n \n                [mui-dialog-headline] {\n                    padding-block-start: var(--spacing-16);\n                }\n            }\n        }\n \n        [mui-dialog-body] {\n            padding: var(--spacing-24);\n        }\n    }\n}\n \n[mui-dialog-overlay] {\n    inset: 0;\n    z-index: 9998;\n    position: fixed;\n    background-color: var(--color-overlay);\n}\n \n@keyframes dialog-fade-in {\n    from {\n        opacity: 0;\n        inset-block-start: 40%;\n        grid-template-rows: 0.5fr;\n    }\n    to {\n        opacity: 1;\n        inset-block-start: 50%;\n        grid-template-rows: 1fr;\n    }\n}\n \n@keyframes dialog-fade-out {\n    from {\n        opacity: 1;\n        inset-block-start: 50%;\n        grid-template-rows: 1fr;\n    }\n    to {\n        opacity: 0;\n        inset-block-start: 40%;\n        grid-template-rows: 0.5fr;\n    }\n}',
      },
    },
    {
      id: "with-icon",
      label: "With Icon",
      preview: DialogWithIcon,
      code: 'import Button from "@/components/ui/button";\nimport {\n    Dialog,\n    DialogBody,\n    DialogClose,\n    DialogContent,\n    DialogHeader,\n    DialogHeadline,\n    DialogSupporting,\n    DialogTrigger,\n} from "@/components/ui/dialog";\n \nexport function DialogWithIcon() {\n    return (\n        <div className="demo">\n            <Dialog>\n                <DialogTrigger>\n                    <Button variant="outlined">Click to open</Button>\n                </DialogTrigger>\n                <DialogContent style={{ width: "500px" }}>\n                    <DialogHeader icon="star" showDivider>\n                        <DialogHeadline>Dialog title</DialogHeadline>\n                        <DialogSupporting>\n                            This is a standard alert dialog. Alert dialogs interrupt users\n                            with urgent information, details, or actions.\n                        </DialogSupporting>\n                    </DialogHeader>\n                    <DialogBody style={{ display: "flex", gap: "10px" }}>\n                        <DialogClose>\n                            <Button variant="text">Cancel</Button>\n                        </DialogClose>\n                        <Button variant="text">Done</Button>\n                    </DialogBody>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n};',
    },
  ],
};

export default DIALOG_DEMO;
