import type { DemoDefinition } from "@/types/demo";
import SelectDemo from "./select-demo";
import SelectVariant from "./select-variant";
import SelectDisabled from "./select-disabled";

const SELECT_DEMO: DemoDefinition = {
  id: "select",
  label: "Select",
  description:
    "Select menus display a list of choices on temporary surfaces and display the currently selected menu item above the menu.",
  content: [
    {
      id: "overview",
      label: "Overview",
      preview: SelectDemo,
      code: 'import { Select, SelectOption } from "@/components/ui/select";\n \nconst SelectDemo = () => {\n    return (\n        <div className="demo">\n            <Select placeholder="Select your favorite fruit...">\n                <SelectOption value="apple">Apple</SelectOption>\n                <SelectOption value="carrot">Carrot</SelectOption>\n                <SelectOption value="banana">Banana</SelectOption>\n                <SelectOption value="broccoli">Broccoli</SelectOption>\n            </Select>\n        </div>\n    );\n};\n \nexport default SelectDemo;',
    },
    {
      id: "installation",
      label: "Installation",
      code: {
        tsx: 'import "./style.css";\nimport Icon from "@/components/misc/icon";\nimport {\n    useRef,\n    Children,\n    useState,\n    useEffect,\n    useContext,\n    createContext,\n    isValidElement,\n    type ReactElement,\n    type KeyboardEvent,\n    type ComponentProps,\n} from "react";\n \ntype SelectProps = ComponentProps<"div"> & {\n    variant?: "outlined" | "filled";\n    disabled?: boolean;\n    placeholder?: string;\n};\n \ntype SelectOptionProps = Omit<ComponentProps<"button">, "value"> & {\n    value: string;\n    selected?: boolean;\n};\n \nconst SelectContext = createContext<{\n    isOpen: boolean;\n    isClosed: boolean;\n    selected: string;\n    open: () => void;\n    close: () => void;\n    setSelected: (value: string) => void;\n} | null>(null);\n \nconst useSelectContext = () => {\n    const ctx = useContext(SelectContext);\n    if (!ctx)\n        throw new Error("SelectOption must be used within a Select component");\n \n    return ctx;\n};\n \nconst Select = ({\n    variant = "outlined",\n    disabled,\n    placeholder,\n    children,\n    ...props\n}: SelectProps) => {\n    const CLOSE_DELAY = 350;\n    const ESC_KEY = "Escape";\n    const ARROW_UP = "ArrowUp";\n    const ARROW_DOWN = "ArrowDown";\n \n    const triggerRef = useRef<HTMLButtonElement>(null);\n    const contentRef = useRef<HTMLDivElement>(null);\n \n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [isClosed, setIsClosed] = useState<boolean>(false);\n    const [selected, setSelected] = useState<string>("");\n \n    function open() {\n        setIsOpen(true);\n    }\n \n    function close() {\n        setIsClosed(true);\n        setTimeout(() => (setIsOpen(false), setIsClosed(false)), CLOSE_DELAY);\n    }\n \n    function getValue() {\n        return Children.toArray(children).find(\n            (c): c is ReactElement<SelectOptionProps> =>\n                isValidElement<SelectOptionProps>(c) && c.props.value === selected\n        )?.props.children;\n    }\n \n    function onKeyDown(e: KeyboardEvent<HTMLDivElement>) {\n        const options = Array.from(\n            e.currentTarget.querySelectorAll<HTMLButtonElement>("[mui-select-option]")\n        );\n        const index = options.findIndex((opt) => opt === document.activeElement);\n \n        if ([ARROW_DOWN, ARROW_UP].includes(e.key)) {\n            e.preventDefault();\n            const next =\n                e.key === ARROW_DOWN\n                    ? (index + 1) % options.length\n                    : (index - 1 + options.length) % options.length;\n            options[next]?.focus();\n        } else if (e.key === ESC_KEY) {\n            close();\n        }\n    }\n \n    useEffect(() => {\n        if (!triggerRef.current) return;\n \n        const onClickOutside = (e: MouseEvent) =>\n            !e.composedPath().includes(triggerRef.current as EventTarget) && close();\n \n        document.addEventListener("click", onClickOutside);\n        return () => document.removeEventListener("click", onClickOutside);\n    }, [isOpen]);\n \n    useEffect(() => {\n        if (!isOpen && selected) return triggerRef.current?.focus();\n \n        const options =\n            contentRef.current?.querySelectorAll<HTMLButtonElement>(\n                "[mui-select-option]"\n            ) ?? [];\n        const focusableOption =\n            [...options].find((opt) => opt.value === selected) ?? options?.[0];\n \n        focusableOption?.focus();\n    }, [selected, isOpen]);\n \n    useEffect(() => {\n        const isDefault = Children.toArray(children).find(\n            (c): c is ReactElement<SelectOptionProps> =>\n                isValidElement<SelectOptionProps>(c) && Boolean(c.props.selected)\n        );\n \n        if (isDefault) setSelected(isDefault.props.value);\n    }, [children]);\n \n    return (\n        <SelectContext\n            value={{ isOpen, isClosed, open, close, selected, setSelected }}>\n            <div mui-select={variant} {...props} aria-disabled={disabled}>\n                <button\n                    ref={triggerRef}\n                    mui-select-trigger=""\n                    role="combobox"\n                    disabled={disabled}\n                    aria-expanded={isOpen}\n                    onClick={isOpen ? close : open}>\n                    <span mui-select-value="">\n                        {getValue() ?? placeholder ?? "Select"}\n                    </span>\n                    <Icon name="arrow_drop_down" />\n                </button>\n                {isOpen && (\n                    <div\n                        role="listbox"\n                        mui-select-portal=""\n                        data-closed={isClosed}\n                        onKeyDown={onKeyDown}>\n                        <div ref={contentRef} mui-select-content="">\n                            {children}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </SelectContext>\n    );\n};\n \nconst SelectOption = ({ value, ...props }: SelectOptionProps) => {\n    const { selected, setSelected, close } = useSelectContext();\n \n    function onSelect() {\n        if (selected === value) return;\n \n        setSelected(value);\n        close();\n    }\n \n    return (\n        <button\n            mui-select-option=""\n            {...props}\n            role="option"\n            onClick={onSelect}\n            aria-selected={selected === value}\n        />\n    );\n};\n \nexport { Select, SelectOption };',
        css: '[mui-select] {\n    position: relative;\n \n    [mui-select-trigger] {\n        width: 100%;\n        height: 56px;\n        outline-offset: -3px;\n        outline: 3px solid transparent;\n        color: var(--color-on-surface);\n        border-radius: var(--radius-xs);\n        padding: var(--spacing-4) var(--spacing-16);\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        transition: var(--transition-standard-default-effects);\n \n        [mui-select-value] {\n            font: var(--font-body-lg);\n        }\n \n        &[aria-expanded="true"] {\n            & > [mui-icon] {\n                rotate: 180deg;\n                color: var(--color-primary);\n            }\n        }\n \n        &:disabled {\n            color: color-mix(in srgb, currentColor 12%, transparent);\n            border-color: color-mix(\n                in srgb,\n                var(--color-on-surface) 12%,\n                transparent\n            ) !important;\n        }\n    }\n \n    [mui-select-portal] {\n        width: 100%;\n        z-index: 9999;\n        position: absolute;\n        display: grid;\n        animation: var(--transition-standard-slow-spatial) forwards;\n \n        &[data-closed="false"] {\n            animation-name: select-fade-in;\n \n            [mui-select-content] {\n                padding-block: var(--spacing-8);\n            }\n        }\n \n        &[data-closed="true"] {\n            animation-name: select-fade-out;\n \n            [mui-select-content] {\n                padding-block: var(--spacing-0);\n            }\n        }\n \n        [mui-select-content] {\n            display: grid;\n            overflow: hidden;\n            border-radius: var(--radius-xs);\n            background-color: var(--color-surface-container);\n            box-shadow: var(--shadow-2);\n            transition: padding-block var(--transition-standard-fast-spatial);\n \n            [mui-select-option] {\n                border: none;\n                height: 56px;\n                cursor: pointer;\n                outline-offset: -3px;\n                outline: 3px solid transparent;\n                text-align: start;\n                font: var(--font-body-lg);\n                background-color: transparent;\n                padding: var(--spacing-4) var(--spacing-16);\n \n                &[aria-selected="true"] {\n                    color: var(--color-primary);\n                    background-color: var(--color-secondary-container);\n                }\n \n                &:hover:not(:disabled),\n                &:focus {\n                    &[aria-selected="false"] {\n                        background-color: var(--color-surface-container-highest);\n                    }\n \n                    &[aria-selected="true"] {\n                        background-color: color-mix(in srgb, currentcolor 12%, transparent);\n                    }\n                }\n \n                &:disabled {\n                    pointer-events: none;\n                    color: color-mix(in srgb, currentColor 12%, transparent);\n                }\n            }\n        }\n    }\n \n    &[mui-select="outlined"] {\n        [mui-select-trigger] {\n            background-color: transparent;\n            border: 1px solid var(--color-outline);\n \n            &:hover {\n                border-color: inherit;\n            }\n \n            &:focus {\n                border-color: transparent;\n                outline-color: var(--color-primary);\n            }\n        }\n    }\n \n    &[mui-select="filled"] {\n        [mui-select-trigger] {\n            border: none;\n            border-end-end-radius: var(--spacing-0);\n            border-end-start-radius: var(--spacing-0);\n            border-block-end: 1px solid var(--color-outline);\n            background-color: var(--color-surface-container-high);\n \n            &:hover {\n                border-color: inherit;\n                background-color: var(--color-surface-container-highest);\n            }\n \n            &:focus {\n                border-color: var(--color-primary);\n                box-shadow: inset 0 -2px 0 0 var(--color-primary);\n            }\n        }\n    }\n}\n \n@keyframes select-fade-in {\n    from {\n        grid-template-rows: 0fr;\n    }\n    to {\n        grid-template-rows: 1fr;\n    }\n}\n \n@keyframes select-fade-out {\n    from {\n        grid-template-rows: 1fr;\n    }\n    to {\n        grid-template-rows: 0fr;\n    }\n}',
      },
    },
    {
      id: "variant",
      label: "Variant",
      preview: SelectVariant,
      code: 'import { Select, SelectOption } from "@/components/ui/select";\n \nconst SelectVariant = () => {\n    const variants: Array<"outlined" | "filled"> = ["outlined", "filled"];\n \n    return (\n        <div className="demo wrap">\n            {variants.map((variant) => (\n                <Select\n                    key={variant}\n                    variant={variant}\n                    placeholder="Select your favorite fruit...">\n                    <SelectOption value="apple">Apple</SelectOption>\n                    <SelectOption value="carrot">Carrot</SelectOption>\n                    <SelectOption value="banana">Banana</SelectOption>\n                    <SelectOption value="broccoli">Broccoli</SelectOption>\n                </Select>\n            ))}\n        </div>\n    );\n};\n \nexport default SelectVariant;',
    },
    {
      id: "disabled",
      label: "Disabled",
      preview: SelectDisabled,
      code: 'import { Select, SelectOption } from "@/components/ui/select";\n \nconst SelectDisabled = () => {\n    return (\n        <div className="demo wrap">\n            <Select placeholder="Select your favorite fruit...">\n                <SelectOption value="apple">Apple</SelectOption>\n                <SelectOption disabled value="carrot">\n                    Carrot\n                </SelectOption>\n                <SelectOption value="banana">Banana</SelectOption>\n                <SelectOption value="broccoli">Broccoli</SelectOption>\n            </Select>\n            <Select placeholder="Select your favorite fruit..." disabled>\n                <SelectOption value="apple">Apple</SelectOption>\n                <SelectOption value="carrot">Carrot</SelectOption>\n                <SelectOption value="banana">Banana</SelectOption>\n                <SelectOption value="broccoli">Broccoli</SelectOption>\n            </Select>\n        </div>\n    );\n};\n \nexport default SelectDisabled;',
    },
  ],
};

export default SELECT_DEMO;
